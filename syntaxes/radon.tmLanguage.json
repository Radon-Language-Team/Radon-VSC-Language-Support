{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Radon",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#expressions"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#functions"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.radon",
          "match": "\\b(if|while|else|for)\\b"
        },
        {
          "name": "keyword.other.unit.radon",
          "match": "\\b(int|string|bool|float|void|any)\\b"
        },
        {
          "name": "keyword.control.return.radon",
          "match": "\\b(return|proc)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.radon",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.radon",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.radon",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.radon",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.radon",
          "match": ":="
        },
        {
          "name": "keyword.operator.reassignment.radon",
          "match": "\\b=\\b"
        },
        {
          "name": "keyword.operator.arrow.radon",
          "match": "->"
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "name": "constant.numeric.radon",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "string.quoted.double.radon",
          "match": "\"(\\\\.|[^\"])*\""
        },
        {
          "name": "string.quoted.single.radon",
          "match": "'(\\\\.|[^'])*'"
        },
        {
          "name": "variable.other.local.radon",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?!\\s*[:=])"
        },
        {
          "name": "keyword.operator.arithmetic.radon",
          "match": "\\+|\\-|\\*|\\/|\\%"
        },
        {
          "name": "keyword.operator.comparison.radon",
          "match": "==|!=|<|>|<=|>="
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.radon",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\()"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.local.radon",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?!\\s*:=)"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "include": "#block-comment"
        },
        {
          "include": "#line-comment"
        }
      ]
    },
    "line-comment": {
      "name": "comment.line.radon",
      "match": "^\\//.*$"
    },
    "block-comment": {
      "begin": "\\/\\*",
      "end": "\\*\\/",
      "beginCaptures": {
        "0": {
          "name": "comment.block.begin.radon"
        }
      },
      "endCaptures": {
        "0": {
          "name": "comment.block.end.radon"
        }
      },
      "name": "comment.block.radon"
    },
    "integer": {
      "match": "\\int",
      "name": "keyword.integer.radon"
    },
    "string": {
      "match": "\\string",
      "name": "keyword.string.radon"
    },
    "paren-expression": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.paran.open"
        }
      },
      "endcaptures": {
        "0": {
          "name": "punctuation.paran.close"
        }
      },
      "name": "expression.group",
      "patterns": [
        {
          "include": "#expressions"
        }
      ]
    }
  },
  "scopeName": "source.radon"
}